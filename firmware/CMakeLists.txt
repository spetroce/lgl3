cmake_minimum_required(VERSION 3.1.3)
# Assembler files (.s) in the source list are ignored by CMake unless we
# “enable” the assembler by telling CMake in the project definition that we’re
# using assembly files.
project(FLIP_DOT_CLOCK C ASM)
string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWER)

set(MCU_FAMILY "STM32F3xx")
set(MCU_LINKER_SCRIPT "${CMAKE_CURRENT_LIST_DIR}/STM32F303K8Tx_FLASH.ld")
set(MCU_STARTUP_SCRIPT "${CMAKE_CURRENT_LIST_DIR}/startup_stm32f303x8.s")
set(MCU_CPU_NAME "cortex-m4")

# The source code under Drivers was generated by STMCubeMX, which was
# configured to only insert necessary driver code under the Drivers directory.
# So it's safe to just glob everything under Drivers.
file(GLOB_RECURSE DRIVER_SOURCES "${CMAKE_CURRENT_LIST_DIR}/Drivers/*.c")
file(GLOB_RECURSE USER_SOURCES "${CMAKE_CURRENT_LIST_DIR}/Core/Src/*.c")
set(SOURCES ${DRIVER_SOURCES}
            ${USER_SOURCES}
            ${MCU_STARTUP_SCRIPT})

set(TOOLCHAIN_PREFIX arm-none-eabi-)
set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER})
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}g++)
set(CMAKE_OBJCOPY ${TOOLCHAIN_PREFIX}objcopy)
set(CMAKE_SIZE_UTIL ${TOOLCHAIN_PREFIX}size)

# https://cmake.org/cmake/help/latest/policy/CMP0065.html
if (POLICY CMP0065)
  cmake_policy(SET CMP0065 NEW)
endif()

# TODO: make these into target_compiler_options()
# The definitions and flags below were copied from .mk files generated by an STM32CubeIDE version of this project.
set(CMAKE_C_FLAGS "-mcpu=${MCU_CPU_NAME} -mthumb -mfpu=fpv4-sp-d16 -mfloat-abi=hard -Wall -fdata-sections -ffunction-sections")
# set(CMAKE_ASM_FLAGS "-x assembler")
set(CMAKE_C_FLAGS_RELEASE "-Os -DNDEBUG")
set(CMAKE_C_FLAGS_DEBUG "-Og -g -gdwarf-2")
set(CMAKE_EXE_LINKER_FLAGS
    "-mcpu=${MCU_CPU_NAME} -mthumb -mfpu=fpv4-sp-d16 -mfloat-abi=hard -specs=nano.specs -T${MCU_LINKER_SCRIPT} -Wl,-Map=${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME_LOWER}.map,--cref -Wl,--gc-sections")

set(ELF_TARGET_NAME "${PROJECT_NAME_LOWER}.elf")
set(BIN_FILE_NAME "${PROJECT_NAME_LOWER}.bin")
set(HEX_FILE_NAME "${PROJECT_NAME_LOWER}.hex")

add_executable("${ELF_TARGET_NAME}" ${SOURCES})
target_compile_definitions("${ELF_TARGET_NAME}" PRIVATE -DUSE_HAL_DRIVER -DSTM32F303x8)
target_include_directories("${ELF_TARGET_NAME}"
    PRIVATE "${CMAKE_CURRENT_LIST_DIR}/Core/Inc"
            "${CMAKE_CURRENT_LIST_DIR}/Drivers/CMSIS/Device/ST/${MCU_FAMILY}/Include"
            "${CMAKE_CURRENT_LIST_DIR}/Drivers/CMSIS/Include"
            "${CMAKE_CURRENT_LIST_DIR}/Drivers/${MCU_FAMILY}_HAL_Driver/Inc"
            "${CMAKE_CURRENT_LIST_DIR}/Drivers/${MCU_FAMILY}_HAL_Driver/Inc/Legacy")
target_link_libraries(${ELF_TARGET_NAME} c m nosys)

set(BIN_DIR ${CMAKE_CURRENT_BINARY_DIR})
add_custom_command(
  TARGET ${ELF_TARGET_NAME}
  POST_BUILD
  COMMAND ${CMAKE_OBJCOPY} -Obinary "${BIN_DIR}/${ELF_TARGET_NAME}" "${BIN_DIR}/${BIN_FILE_NAME}"
  COMMAND ${CMAKE_OBJCOPY} -Oihex "${BIN_DIR}/${ELF_TARGET_NAME}" "${BIN_DIR}/${HEX_FILE_NAME}"
  COMMENT "Generating binary file ${BIN_FILE_NAME} and hex file ${HEX_FILE_NAME} from ${ELF_FILE_NAME}")

install(FILES "${BIN_DIR}/${HEX_FILE_NAME}" DESTINATION "/run/media/$ENV{USER}/NODE_F303K8")
